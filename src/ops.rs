use std::fmt::{self, Display, Formatter};

#[derive(Debug, Copy, Clone)]
pub enum OperationName {
    Adc,
    And,
    Asl,
    Bcc,
    Bcs,
    Beq,
    Bit,
    Bmi,
    Bne,
    Bpl,
    Brk,
    Bvc,
    Bvs,
    Clc,
    Cld,
    Cli,
    Clv,
    Cmp,
    Cpx,
    Cpy,
    Dec,
    Dex,
    Dey,
    Eor,
    Inc,
    Inx,
    Iny,
    Jmp,
    Jsr,
    Lda,
    Ldx,
    Ldy,
    Lsr,
    Nop,
    Ora,
    Pha,
    Php,
    Pla,
    Plp,
    Rol,
    Ror,
    Rti,
    Rts,
    Sbc,
    Sec,
    Sed,
    Sei,
    Sta,
    Stx,
    Sty,
    Tax,
    Tay,
    Tsx,
    Txa,
    Txs,
    Tya,
}

impl OperationName {
    pub fn parse<S: AsRef<str>>(s: S) -> Option<Self> {
        match s.as_ref() {
            "adc" | "ADC" => Some(Self::Adc),
            "and" | "AND" => Some(Self::And),
            "asl" | "ASL" => Some(Self::Asl),
            "bcc" | "BCC" => Some(Self::Bcc),
            "bcs" | "BCS" => Some(Self::Bcs),
            "beq" | "BEQ" => Some(Self::Beq),
            "bit" | "BIT" => Some(Self::Bit),
            "bmi" | "BMI" => Some(Self::Bmi),
            "bne" | "BNE" => Some(Self::Bne),
            "bpl" | "BPL" => Some(Self::Bpl),
            "brk" | "BRK" => Some(Self::Brk),
            "bvc" | "BVC" => Some(Self::Bvc),
            "bvs" | "BVS" => Some(Self::Bvs),
            "clc" | "CLC" => Some(Self::Clc),
            "cld" | "CLD" => Some(Self::Cld),
            "cli" | "CLI" => Some(Self::Cli),
            "clv" | "CLV" => Some(Self::Clv),
            "cmp" | "CMP" => Some(Self::Cmp),
            "cpx" | "CPX" => Some(Self::Cpx),
            "cpy" | "CPY" => Some(Self::Cpy),
            "dec" | "DEC" => Some(Self::Dec),
            "dex" | "DEX" => Some(Self::Dex),
            "dey" | "DEY" => Some(Self::Dey),
            "eor" | "EOR" => Some(Self::Eor),
            "inc" | "INC" => Some(Self::Inc),
            "inx" | "INX" => Some(Self::Inx),
            "iny" | "INY" => Some(Self::Iny),
            "jmp" | "JMP" => Some(Self::Jmp),
            "jsr" | "JSR" => Some(Self::Jsr),
            "lda" | "LDA" => Some(Self::Lda),
            "ldx" | "LDX" => Some(Self::Ldx),
            "ldy" | "LDY" => Some(Self::Ldy),
            "lsr" | "LSR" => Some(Self::Lsr),
            "nop" | "NOP" => Some(Self::Nop),
            "ora" | "ORA" => Some(Self::Ora),
            "pha" | "PHA" => Some(Self::Pha),
            "php" | "PHP" => Some(Self::Php),
            "pla" | "PLA" => Some(Self::Pla),
            "plp" | "PLP" => Some(Self::Plp),
            "rol" | "ROL" => Some(Self::Rol),
            "ror" | "ROR" => Some(Self::Ror),
            "rti" | "RTI" => Some(Self::Rti),
            "rts" | "RTS" => Some(Self::Rts),
            "sbc" | "SBC" => Some(Self::Sbc),
            "sec" | "SEC" => Some(Self::Sec),
            "sed" | "SED" => Some(Self::Sed),
            "sei" | "SEI" => Some(Self::Sei),
            "sta" | "STA" => Some(Self::Sta),
            "stx" | "STX" => Some(Self::Stx),
            "sty" | "STY" => Some(Self::Sty),
            "tax" | "TAA" => Some(Self::Tax),
            "tay" | "TAY" => Some(Self::Tay),
            "tsx" | "TSX" => Some(Self::Tsx),
            "txa" | "TXA" => Some(Self::Txa),
            "txs" | "TXS" => Some(Self::Txs),
            "tya" | "TYA" => Some(Self::Tya),
            _ => None,
        }
    }
}

impl Display for OperationName {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                Self::Adc => "adc",
                Self::And => "and",
                Self::Asl => "asl",
                Self::Bcc => "bcc",
                Self::Bcs => "bcs",
                Self::Beq => "beq",
                Self::Bit => "bit",
                Self::Bmi => "bmi",
                Self::Bne => "bne",
                Self::Bpl => "bpl",
                Self::Brk => "brk",
                Self::Bvc => "bvc",
                Self::Bvs => "bvs",
                Self::Clc => "clc",
                Self::Cld => "cld",
                Self::Cli => "cli",
                Self::Clv => "clv",
                Self::Cmp => "cmp",
                Self::Cpx => "cpx",
                Self::Cpy => "cpy",
                Self::Dec => "dec",
                Self::Dex => "dex",
                Self::Dey => "dey",
                Self::Eor => "eor",
                Self::Inc => "inc",
                Self::Inx => "inx",
                Self::Iny => "iny",
                Self::Jmp => "jmp",
                Self::Jsr => "jsr",
                Self::Lda => "lda",
                Self::Ldx => "ldx",
                Self::Ldy => "ldy",
                Self::Lsr => "lsr",
                Self::Nop => "nop",
                Self::Ora => "ora",
                Self::Pha => "pha",
                Self::Php => "php",
                Self::Pla => "pla",
                Self::Plp => "plp",
                Self::Rol => "rol",
                Self::Ror => "ror",
                Self::Rti => "rti",
                Self::Rts => "rts",
                Self::Sbc => "sbc",
                Self::Sec => "sec",
                Self::Sed => "sed",
                Self::Sei => "sei",
                Self::Sta => "sta",
                Self::Stx => "stx",
                Self::Sty => "sty",
                Self::Tax => "tax",
                Self::Tay => "tay",
                Self::Tsx => "tsx",
                Self::Txa => "txa",
                Self::Txs => "txs",
                Self::Tya => "tya",
            }
        )
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum RegisterName {
    A,
    X,
    Y,
}

impl RegisterName {
    pub fn parse<S: AsRef<str>>(s: S) -> Option<Self> {
        match s.as_ref() {
            "a" | "A" => Some(Self::A),
            "x" | "X" => Some(Self::X),
            "y" | "Y" => Some(Self::Y),
            _ => None,
        }
    }
}

impl Display for RegisterName {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                Self::A => "a",
                Self::X => "x",
                Self::Y => "y",
            }
        )
    }
}
